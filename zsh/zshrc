# If you have the machine specific settings (e.g. PATH),
# you can use ~/.zshenv

############################################
# env
############################################
if [ $SHLVL = 1 ]; then
    # Add local binary path
    export PATH="$HOME/.local/bin:$PATH"
    # Add cargo-binstall tools path
    export PATH="$HOME/.cargo/bin:$PATH"

    # anyenv setup
    eval "$(anyenv init -)"

    # Disable clippy link
    export CLIPPY_DISABLE_DOCS_LINKS=true
fi

# Additional machine specific completions
fpath=($fpath $HOME/.local/share/zsh/Completions)

############################################
# plugin manager
############################################
# Plugin configlation locate ~/.config/sheldon/plugins.toml
cache_dir=${XDG_CACHE_HOME:-$HOME/.cache}
sheldon_cache="$cache_dir/sheldon.zsh"
sheldon_toml="$HOME/.config/sheldon/plugins.toml"
if [[ ! -r "$sheldon_cache" || "$sheldon_toml" -nt "$sheldon_cache" ]]; then
    echo -e "Caching source files... "
    mkdir -p $cache_dir
    sheldon source > $sheldon_cache
    echo "done."
fi
source "$sheldon_cache"

############################################
# starship
############################################
eval "$(starship init zsh)"

############################################
# alias
############################################
# vim
alias v='nvim'
alias vimrc="nvim ~/.config/nvim/init.lua"
# ls
alias ls='ls --color=auto'
alias ll='ls -l'
alias la='ls -a'
alias l='ls -al'
# docker
alias d='docker'
alias dockerrm='docker rm $(docker ps -aq)'
alias dockerps='docker ps -a'
# git
alias g='git'
alias gs='git status'
alias ga='git add'
alias gaa='git add -A'
alias gg='git graph'
alias gb='git branch'
alias gc='git checkout'
alias gd='git diff'
function gcm {
    git commit -m "$*"
}
# Rust
alias c='cargo'
# other
alias color='for c in {000..255}; do echo -n "\e[38;5;${c}m $c" ; [ $(($c%16)) -eq 15 ] && echo;done;echo'
alias clear='clear -x'
alias size='du -sh'
alias ps='ps auxf'
alias mkcd=mkcd
function mkcd(){
    mkdir $1;
    cd $1;
}

############################################
# Completion
############################################
autoload -U compinit
compinit

# メニュー補完を有効にする
zstyle ':completion:*' menu true select
# 補完候補を色付けする
zstyle ':completion:*' list-colors $LS_COLORS
# 大文字と小文字を区別しない
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
# ../ の後の補完でPWDを候補から外す
zstyle ':completion:*' ignore-parents parent pwd ..
# sudo の後にコマンドを補完する
zstyle ':completion:*:sudo:*' command-path $PATH
# xxx
zstyle ':completion:*' verbose yes
# xxx
zstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history

# ディレクトリ名の補完で末尾の / を自動的に付加し、次の補完に備える
setopt auto_param_slash
# ファイル名の展開でディレクトリにマッチした場合 末尾に / を付加
setopt mark_dirs
# 補完候補一覧でファイルの種別を識別マーク表示
setopt list_types
# 補完キー連打で順に補完候補を自動で補完
setopt auto_menu
# カッコの対応などを自動的に補完
setopt auto_param_keys
# コマンドラインでも # 以降をコメントと見なす
setopt interactive_comments
# コマンドラインの引数で --prefix=/usr などの = 以降でも補完できる
setopt magic_equal_subst
# 語の途中でもカーソル位置で補完
setopt complete_in_word
# カーソル位置は保持したままファイル名一覧を順次その場で表示
setopt always_last_prompt
# 拡張グロブで補完(~とか^とか。例えばless *.txt~memo.txt ならmemo.txt 以外の *.txt にマッチ)
setopt extended_glob
# 一覧を詰めて表示
setopt list_packed

############################################
# CDR
############################################
if [[ -z "$ZSH_CDR_DIR" ]]; then
    ZSH_CDR_DIR=${XDG_CACHE_HOME:-$HOME/.cache}/zsh-cdr
fi
mkdir -p $ZSH_CDR_DIR
autoload -Uz chpwd_recent_dirs cdr
autoload -U add-zsh-hook
add-zsh-hook chpwd chpwd_recent_dirs
zstyle ':chpwd:*' recent-dirs-file $ZSH_CDR_DIR/recent-dirs
zstyle ':chpwd:*' recent-dirs-max 1000
zstyle ':chpwd:*' recent-dirs-default yes
function fzf-cdr() {
    target_dir=`cdr -l | sed 's/^[^ ][^ ]*  *//' | fzf`
    target_dir=`echo ${target_dir/\~/$HOME}`
    if [ -n "$target_dir" ]; then
        cd $target_dir
    fi
}
alias cdd='fzf-cdr'

############################################
# History
############################################
HISTSIZE=100000
SAVEHIST=100000
HISTFILE=~/.zsh_history

setopt hist_expire_dups_first
setopt hist_ignore_all_dups
setopt hist_ignore_dups
setopt hist_save_no_dups
setopt share_history

function select-history() {
  BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
  CURSOR=$#BUFFER
  zle accept-line
}
zle -N select-history

############################################
# Key-bind
############################################

## Disable zsh flow control (C^q and C^s)
setopt no_flow_control

bindkey '^r' select-history
bindkey '^q' push-input

############################################
# Startup program
############################################
if [ $SHLVL = 1 ]; then
    if [ "$(tmux list-sessions 2> /dev/null )" != "" ]; then
        tmux a > /tmp/tmux-$(whoami)
    else
        tmux > /tmp/tmux-$(whoami)
    fi
fi

if [ "$(cat /tmp/tmux-$(whoami))" = "[exited]" ]; then
    exit
fi
